# Docker Compose file for a multi-container application
docker-compose.yml:

# Specifies the version of the Docker Compose file format
version: '3.8'  

# Defines the containers that make up the application
services:
  web:
    image: nginx:latest  # Specifies the Docker image to use for the service.
    container_name: web_container  # Sets the name of the container.
    ports:  # Exposes ports from the container to the host system.
      - "8080:80"  # Maps port 80 inside the container to port 8080 on the host.
    volumes:  # Specifies volumes to mount into the container.
      - ./nginx.conf:/etc/nginx/nginx.conf  # Mounts the local nginx.conf file into the container.
    networks:  # Defines which networks the service should be connected to.
      - frontend  # Connects to the frontend network.
      - backend   # Connects to the backend network.
    depends_on:  # Specifies dependencies between services.
      - db  # Indicates that the web service depends on the db service.

  db:
    image: postgres:latest  # Specifies the Docker image to use for the service.
    container_name: db_container  # Sets the name of the container.
    ports:  # Exposes ports from the container to the host system.
      - "5432:5432"  # Maps port 5432 inside the container to port 5432 on the host.
    volumes:  # Specifies volumes to mount into the container.
      - db-data:/var/lib/postgresql/data  # Mounts a volume for persisting database data.
    networks:  # Defines which networks the service should be connected to.
      - backend   # Connects to the backend network.
      - frontend  # Connects to the frontend network.
    depends_on:  # Specifies dependencies between services.
      - other_db_service  # Indicates that the db service depends on the other_db_service.
    build:  # Specifies the build context for building a custom Docker image.
      context: ./path/to/build/context  # Specifies the build context directory.
      dockerfile: Dockerfile  # Specifies the Dockerfile to use for building the image.
    environment:  # Specifies environment variables directly.
      - POSTGRES_DB=mydatabase  # Sets the name of the database to "mydatabase".
      - POSTGRES_USER=myuser     # Sets the username for accessing the database.
      - POSTGRES_PASSWORD=mypassword  # Sets the password for accessing the database.
    env_file:  # Specifies an external file containing environment variables.
      - ./db.env  # Specifies the file containing the environment variables.
    entrypoint:  # Overrides the default entrypoint specified by the Docker image.
      - "/bin/bash"  # Specifies the entrypoint command.
    command:  # Overrides the default command specified by the Docker image.
      - "--option"  # Specifies the command to execute.
    extra_hosts:  # Adds additional hostnames to resolve inside the container.
      - "host1:192.168.0.1"  # Maps hostname "host1" to IP address "192.168.0.1".
    labels:  # Adds metadata to the container.
      - com.example.description="Database container"  # Adds a description label.
      - com.example.department="IT"  # Adds a department label.
    restart:  # Defines the restart policy for the service.
      unless-stopped  # Restarts the container unless explicitly stopped.
    secrets:  # Specifies secrets to be passed to the service.
      - db_password  # Specifies the name of the secret.
    user:  # Sets the user or UID for the container.
      1000:1000  # Specifies the user and group IDs.
    working_dir:  # Sets the working directory for the command.
      /app  # Specifies the working directory path.
    privileged:  # Gives the container full access to the host system.
      true  # Enables privileged mode.
    cap_add:  # Adds Linux capabilities.
      - SYS_ADMIN  # Adds the SYS_ADMIN capability.
    cap_drop:  # Drops Linux capabilities.
      - NET_ADMIN  # Drops the NET_ADMIN capability.
    devices:  # Allows the container to access host devices.
      - "/dev/sda:/dev/xvda:rwm"  # Maps the host device to the container device.
    dns:  # Sets custom DNS servers for the container.
      - 8.8.8.8  # Sets Google's DNS server.
      - 8.8.4.4  # Sets Google's backup DNS server.
    healthcheck:  # Defines a health check for the service.
      test: ["CMD", "curl", "-f", "http://localhost/"]  # Specifies the command to check the health.
      interval: 1m  # Sets the interval between health checks.
      timeout: 10s   # Sets the timeout for health checks.
      retries: 3     # Sets the number of retries before considering the container unhealthy.
      start_period: 40s  # Sets the start period for health checks.
    logging:  # Specifies logging options for the container.
      driver: syslog  # Sets the logging driver to syslog.
      options:  # Specifies additional logging options.
        syslog-address: "tcp://192.168.1.10:123"
    stop_signal:  # Specifies the signal to stop the container.
      SIGTERM  # Sets the stop signal to SIGTERM.

# Defines custom networks for the services
networks:
  frontend:
    driver: bridge  # Specifies the driver type for the network

  backend:
    driver: bridge  # Specifies the driver type for the network
    driver_opts:  # Options specific to the network driver
      com.docker.network.bridge.name: "custom_bridge"  # Sets the name of the network bridge
      com.docker.network.bridge.enable_icc: "true"     # Enables inter-container communication
      com.docker.network.bridge.enable_ip_masquerade: "true"  # Enables IP masquerading
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"    # Specifies the IPv4 address to bind to
      com.docker.network.bridge.enable_ip6: "true"   # Enables IPv6 for the network
      com.docker.network.driver.mtu: "1500"          # Sets the maximum transmission unit (MTU) for the network
      com.docker.network.bridge.name: "custom_bridge"  # Sets the name of the network bridge
      com.docker.network.bridge.enable_ip_masquerade: "true"  # Enables IP masquerading
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"    # Specifies the IPv4 address to bind to
      com.docker.network.bridge.enable_ip6: "true"   # Enables IPv6 for the network
      com.docker.network.driver.mtu: "1500"          # Sets the maximum transmission unit (MTU) for the network
      com.docker.network.driver.packet.logging: "true"  # Enables packet logging for the network
      com.docker.network.bridge.enable_icc: "true"     # Enables inter-container communication

# Defines named volumes for persisting data
volumes:
  data_volume:
    driver: local  # Specifies the driver type for the volume
    driver_opts:  # Options specific to the volume driver
      type: "nfs"  # Specifies the type of volume to create
      o: "addr=192.168.1.10,rw,nolock"  # Specifies additional options for the volume

  backup_volume:
    driver: local  # Specifies the driver type for the volume
    driver_opts:  # Options specific to the volume driver
      type: "local"  # Specifies the type of volume to create
      device: "/dev/xvdf"  # Specifies the device to use for the volume
      o: "bind"  # Specifies additional options for the volume

# Defines secrets to securely pass sensitive information to services
secrets:
  db_password:
    file: ./db_password.txt  # Specifies the file containing the secret data

  api_key:
    external: true  # Specifies that the secret is external and managed outside of Docker Compose

# Defines configuration files or data to be shared among services
configs:
  nginx_config:
    file: ./nginx.conf  # Specifies the file containing the configuration data

  db_config:
    external: true  # Specifies that the config is external and managed outside of Docker Compose
